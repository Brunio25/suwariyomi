// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }

    throw UnsupportedError(
      'DefaultFirebaseOptions are not supported for this platform.',
    );
  }

  static late FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.get('ANDROID_APIKEY', fallback: ''),
    appId:  dotenv.get('ANDROID_APPID', fallback: ''),
    messagingSenderId: dotenv.get('MESSAGE_SENDER_ID', fallback: ''),
    projectId: dotenv.get('PROJECT_ID', fallback: ''),
    databaseURL: dotenv.get('DATABASE_URL', fallback: ''),
    storageBucket: dotenv.get('STORAGE_BUCKET', fallback: ''),
  );

  static late FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.get('IOS_APIKEY', fallback: ''),
    appId: dotenv.get('IOS_APPID', fallback: ''),
    messagingSenderId: dotenv.get('MESSAGE_SENDER_ID', fallback: ''),
    projectId: dotenv.get('PROJECT_ID', fallback: ''),
    databaseURL: dotenv.get('DATABASE_URL', fallback: ''),
    storageBucket: dotenv.get('STORAGE_BUCKET', fallback: ''),
    iosClientId: dotenv.get('IOS_CLIENT_ID', fallback: ''),
    iosBundleId: dotenv.get('IOS_BUNDLE_ID', fallback: ''),
  );
}
